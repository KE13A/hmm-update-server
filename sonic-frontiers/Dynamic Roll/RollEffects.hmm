Code "Roll Trail"
//
	#include "BlackboardStatus" noemit 

    #lib "HMM"
    #lib "INI"
    #lib "Player"
    #LIB "Lua"

    #import "RollLibrary"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool IsConfigInitialised = false;
    static int RollTrail = 0;
    static bool Streak = false;
    static float rollTime = 0.0f;
    static float airRollTime = 0.0f;
//
{
    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("Dynamic Roll");
        if (modsQuery.Count == 1)
        {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            RollTrail = INI.Parse<int>(ini["Main"]["RollTrail"], RollTrail);
        }

        IsConfigInitialised = true;
    }

    if (RollTrail == 0)
    {
        return;
    }

    Lua.Call("LoadLevel", "warship01")

    var currentState = Player.State.GetCurrentStateID<Sonic.StateID>();
    var previousState = Player.State.GetPreviousStateID<Sonic.StateID>();

    float currentSpeed = Player.Kinematics.GetMagnitude();

    if (RollLibrary.Rolling)
    {
        rollTime += Time.GetDeltaTime() * RollLibrary.timeScale;
    }
    else
    {
        rollTime = 0.0f;
    }

    if (RollLibrary.GetAirRoll())
    {
        airRollTime += Time.GetDeltaTime() * RollLibrary.timeScale;
    }
    else
    {
        airRollTime = 0.0f;
    }

    if (RollTrail == 1)
    {
        if((!RollLibrary.Rolling && !RollLibrary.Jumping) || RollLibrary.rollInputReleased || RollLibrary.preRoll || RollLibrary.GetAirFlip() || currentSpeed <= 5.0f)
        {
            Player.Effect.StopEffect("RollTrail");
            Streak = false;
        }
        else if ((Player.Status.IsGrounded() && rollTime > 0.0085f) || (airRollTime > (0.09f * RollLibrary.timeScale))) 
        {
            if(!Streak)
            {
                if(Player.GetPlayerType() == Player.PlayerType.Sonic)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Sonic")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Tails)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Tails")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Knuckles)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Knuckles")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Amy)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Amy")
                }
                Streak = true;
            }
        }
        else
        {
            Player.Effect.StopEffect("RollTrail");
            Streak = false;
        }
    }
}


Code "Roll Up SFX"
//
	#include "BlackboardStatus" noemit 

    #lib "Player"

    #import "RollLibrary"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool spinSFX = false;
//
{
    var currentState = Player.State.GetCurrentStateID<Sonic.StateID>();
    var previousState = Player.State.GetPreviousStateID<Sonic.StateID>();

    // Plays Sound effect when starting roll
    if (RollLibrary.rollInputDown && !spinSFX && (((currentState == Sonic.StateID.StateSpringJumpHeadLand || RollLibrary.Rolling) && RollLibrary.rollInputPressedTime > (RollLibrary.preRollTransitionTime * 1.0f/2.0f)) || (RollLibrary.GetAirRoll() && !RollLibrary.currentFriendsAerialState)))
    {
        Player.Sound.PlaySound("_sn_stomping_start");
        spinSFX = true;
    }
    else if ((RollLibrary.rollInputReleased || RollLibrary.currentFriendsAerialState) && spinSFX)
    {
        int soundHandle = Player.Sound.PlaySound("_sn_stomping_start");
        Player.Sound.StopSound(&soundHandle);
        spinSFX = false;
    }
}