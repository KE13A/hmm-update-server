Code "Roll Trail"
//
	#include "BlackboardStatus" noemit 

    #lib "HMM"
    #lib "INI"
    #lib "Player"
    #LIB "Lua"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool IsConfigInitialised = false;
    static int RollTrail = 0;
    static bool Streak = false;
    static float rollTime = 0.0f;
//
{
    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("Dynamic Roll");
        if (modsQuery.Count == 1)
        {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            RollTrail = INI.Parse<int>(ini["Main"]["RollTrail"], RollTrail);
        }

        IsConfigInitialised = true;
    }

    if (RollTrail == 0)
    {
        return;
    }

    Lua.Call("LoadLevel", "warship01")

    var currentState = Player.State.GetCurrentStateID<Sonic.StateID>();

    bool Rolling =
    currentState == Sonic.StateID.StateSpin ||
    currentState == Sonic.StateID.StateDropDash ||
    currentState == Sonic.StateID.StateDriftDash ||
    currentState == Sonic.StateID.StateSpinBoost ||
    currentState == Sonic.StateID.StateSpinBoostCharge;

    bool isBoomDown = Player.Input.IsDown(Player.InputActionType.PlayerSonicboom);
    bool isBoomReleased = Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom);

    float currentSpeed = Player.Kinematics.GetMagnitude();
    float timeScale = Time.GetDeltaTime() / (1.0f / 60.0f); // normalize to 60fps equivalent

    if (Rolling)
    {
        rollTime += (Time.GetDeltaTime() * timeScale);
    }
    else
    {
        rollTime = 0.0f;
    }

    if (RollTrail == 1)
    {
        if(!Rolling || isBoomReleased || currentSpeed <= 5.0f)
        {
            Player.Effect.StopEffect("RollTrail");
            Streak = false;
        }
        else if ((rollTime > 0.0085f && Player.Status.IsGrounded()) || (isBoomDown && !Player.Status.IsGrounded()))
        {
            if(!Streak)
            {
                if(Player.GetPlayerType() == Player.PlayerType.Sonic)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Sonic")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Tails)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Tails")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Knuckles)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Knuckles")
                }

                if(Player.GetPlayerType() == Player.PlayerType.Amy)
                {
                Player.Effect.PlayEffect("RollTrail", "CUSTOM_Amy")
                }
                Streak = true;
            }
        }
        else
        {
            Player.Effect.StopEffect("RollTrail");
            Streak = false;
        }
    }
}


Code "Roll Up SFX"
//
	#include "BlackboardStatus" noemit 

    #lib "Player"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool _isInitialised = false;
    static bool spinSFX = false;
    static float rollTime = 0.0f;
    static float preRollTargetTime = 0.0f;
//
{
    var currentState = Player.State.GetCurrentStateID<Sonic.StateID>();

    bool isBoomDown = Player.Input.IsDown(Player.InputActionType.PlayerSonicboom);
    bool isBoomReleased = Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom);

    bool Rolling =
    currentState == Sonic.StateID.StateSpin ||
    currentState == Sonic.StateID.StateDropDash ||
    currentState == Sonic.StateID.StateDriftDash ||
    currentState == Sonic.StateID.StateSpinBoost ||
    currentState == Sonic.StateID.StateSpinBoostCharge;

    float currentSpeed = Player.Kinematics.GetMagnitude();
    float timeScale = 1.0f; // normalize to 60fps equivalent
    
    if (Rolling)
    {
        preRollTargetTime = (0.1f / currentSpeed);
        timeScale = Time.GetDeltaTime() / (1.0f / 60.0f);
        rollTime += (Time.GetDeltaTime() * timeScale);
    }
    else
    {
        rollTime = 0.0f;
    }

    // Plays Sound effect when starting roll
    if (isBoomDown && rollTime > preRollTargetTime && !spinSFX)
    {
        Player.Sound.PlaySound("_sn_stomping_start");
        spinSFX = true;
    }
    else if ((isBoomReleased && spinSFX))
    {
        int soundHandle = Player.Sound.PlaySound("_sn_stomping_start");
        Player.Sound.StopSound(&soundHandle);
        spinSFX = false;
    }
}
