Library "RollLibrary" by "KE13A"  // Rolling Parameters
{
    #lib "HMM"
    #lib "INI"
    #lib "Player"
    #lib "Time"

    using System;
    using System.Collections.Generic;
    using System.Windows.Forms;
    using System.IO;

    #load "System.Windows.Forms.dll"

    const Player.InputActionType actionInput = Player.InputActionType.PlayerSonicboom;

    public static float timeScale;

    public static bool rollInputPressed;
    public static bool rollInputDown;
    public static bool rollInputReleased;

    public static float rollInputPressedTime;

    public static bool Rolling;
    public static bool Rolled;
    public static bool Jumping;
    public static bool Jumped;

    public static bool preRoll;
    public static float preRollTransitionTime;

    public static bool airRoll;
    public static bool airFlip;

    public static bool currentFriendsAerialState;
    public static bool previousFriendAerialStates;

    public static bool BoomKickOutOfCombat;

    public void SetRollInputPressedTime(float value) {rollInputPressedTime = value;}
    public float GetRollInputPressedTime() {return rollInputPressedTime;}

    public void SetAirRoll(bool value)
    {
        if (value == true)
        {                    
            Player.State.Discard<Sonic.StateID>(Sonic.StateID.StateSpinBoostCharge);
            Player.State.Discard<Amy.StateID>(Amy.StateID.StateSpinBoostCharge);
            Player.State.Discard<Knuckles.StateID>(Knuckles.StateID.StateSpinBoostCharge);
            Player.State.Discard<Tails.StateID>(Tails.StateID.StateSpinBoostCharge);

            Player.State.SetState(Sonic.StateID.StateSpinBoostCharge); 
        }

        airRoll = value;
    }
    public bool GetAirRoll() {return airRoll;}

    public void SetAirFlip(bool value) {airFlip = value;}
    public bool GetAirFlip() {return airFlip;}

    [LibraryInitializer]
    public void Init() 
    {

    }
    
    [LibraryUpdate]
    public void Update()
    {
        timeScale = Time.GetDeltaTime() / (1.0f / 60.0f); // normalize to 60fps equivalent

        rollInputPressed = Player.Input.IsPressed(actionInput);
        rollInputDown = Player.Input.IsDown(actionInput);
        rollInputReleased = Player.Input.IsReleased(actionInput);

        if (rollInputDown)
        {
            rollInputPressedTime += Time.GetDeltaTime() * timeScale;
        }
        else
        {
            rollInputPressedTime = 0.0f;
        }

        Rolling =
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpin ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost;

        Rolled =
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpin ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost;

        Jumping =
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBaseJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateWallJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch ||
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge;

        Jumped =
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateBaseJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateWallJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateFall ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateGrindJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch ||
        Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge;

        BoomKickOutOfCombat =
        Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSonicBoomKick &&
        (Player.Status.GetLockOnTarget() == null || 
        GameObject.GetGOC(Player.Status.GetLockOnTarget(), "GOCHealth") == null);


        currentFriendsAerialState =
        Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateHighJump ||
        Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StatePropellerJump ||
        Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StatePropellerHover ||
        Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateStompingDown ||
        Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateGliding ||
        Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateStompingDown ||
        Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateTailsFly ||
        Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.TailsStateStompingDown;

        previousFriendAerialStates =
        Player.State.GetPreviousStateID<Amy.StateID>() == Amy.StateID.StateHighJump ||
        Player.State.GetPreviousStateID<Amy.StateID>() == Amy.StateID.StatePropellerJump ||
        Player.State.GetPreviousStateID<Amy.StateID>() == Amy.StateID.StatePropellerHover ||
        Player.State.GetPreviousStateID<Amy.StateID>() == Amy.StateID.AmyStateStompingDown ||
        Player.State.GetPreviousStateID<Knuckles.StateID>() == Knuckles.StateID.StateGliding ||
        Player.State.GetPreviousStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateStompingDown ||
        Player.State.GetPreviousStateID<Tails.StateID>() == Tails.StateID.StateTailsFly ||
        Player.State.GetPreviousStateID<Tails.StateID>() == Tails.StateID.TailsStateStompingDown;
    }
}