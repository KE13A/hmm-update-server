Code "Force Depth of Field on far Objects" in "Graphics/Quality" by "KE13A" does "Forces Depth of Field to render with custom values." 
//
    #lib "HMM"
    #lib "INI"

    static bool IsConfigInitialised = false;
    static int dofNearStartInt = 0; // Near depth where blur begins
    static int dofNearEndInt = 3; // Near depth where blur ends
    static int dofFarStartInt = 50; // Far depth where blur starts
    static int dofFarEndInt = 4000; // Far depth max blur
    static int dofSamples = 20; // Number of bokeh samples
//
{
    float dofNearStart = (float)dofNearStartInt;
    float dofNearEnd   = (float)dofNearEndInt;
    float dofFarStart  = (float)dofFarStartInt;
    float dofFarEnd    = (float)dofFarEndInt;

    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("Force Custom Depth of Field");
        if (modsQuery.Count == 1)
        {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            dofNearStartInt = INI.Parse<int>(ini["Main"]["dofNearStart"], dofNearStartInt);
            dofNearEndInt = INI.Parse<int>(ini["Main"]["dofNearEnd"], dofNearEndInt);
            dofFarStartInt = INI.Parse<int>(ini["Main"]["dofFarStart"], dofFarStartInt);
            dofFarEndInt = INI.Parse<int>(ini["Main"]["dofFarEnd"], dofFarEndInt);
            dofSamples = INI.Parse<int>(ini["Main"]["dofSamples"], dofSamples);

            dofNearStart = (float)dofNearStartInt;
            dofNearEnd = (float)dofNearEndInt;
            dofFarStart = (float)dofFarStartInt;
            dofFarEnd = (float)dofFarEndInt;
        }

        IsConfigInitialised = true;
    }


    // FxDOFParameter
    WriteAsmHook
    (
        $@"
            ; Enable DOF
            mov  byte ptr [r8], 1

            ; Set foreground bokeh depth to end at 3 and start at 0
            mov  dword ptr [r8+4],  {BitConverter.ToInt32(BitConverter.GetBytes(dofNearStart), 0)}
            mov  dword ptr [r8+8],  {BitConverter.ToInt32(BitConverter.GetBytes(dofNearEnd), 0)}

            ; Set background bokeh depth to start at 4000 and end at 50
            mov  dword ptr [r8+12], {BitConverter.ToInt32(BitConverter.GetBytes(dofFarStart), 0)}
            mov  dword ptr [r8+16], {BitConverter.ToInt32(BitConverter.GetBytes(dofFarEnd), 0)}

            ; Increase sample count to 20
            mov  dword ptr [r8+32], {dofSamples}

            ; Set render target size to full
            mov  byte ptr [r8+48], 0
        ",

        /* 0x1482689B8 */
        ScanSignature
        (
            "\x45\x0F\x10\x08\x89\x84\x24\x90\x00\x00\x00",
            "xxxxxxxxxxx"
        ),

        HookBehavior.After
    );

    // FxRenderTargetSetting
    WriteAsmHook
    (
        $@"
            ; Original code
            lea rbp, [rsp-400h]
            sub rsp, 500h
            mov r15, rcx

            ; Set render target size to full
            mov dword ptr [rdx], 0
        ",

        /* 0x140B83134 */
        ScanSignature
        (
            "\x48\x8D\xAC\x24\x00\xFC\xFF\xFF\x48\x81\xEC\x00\x05\x00\x00\x4C\x8B\xF9",
            "xxxxxxxxxxxxxxxxxx"
        ),

        HookBehavior.Replace
    );
}